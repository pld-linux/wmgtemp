diff -urN --exclude='*~' --exclude='.#*' --exclude=CVS --exclude=RCS --exclude='*,v' wmgtemp-0.5/wmgtemp.1 wmgtemp-0.5-new/wmgtemp.1
--- wmgtemp-0.5/wmgtemp.1	Mon Jun 11 23:32:07 2001
+++ wmgtemp-0.5-new/wmgtemp.1	Tue Dec 18 18:46:08 2001
@@ -6,7 +6,7 @@
 .B wmgtemp
 .I "[options]"
 .SH "DESCRIPTION"
-wmgtemp is a dock-app for Window Maker that graphically displays the CPU and System temperatures using the lm_sensors package. It was originally intended to work with the VIA686A chipset but also supports some other sensors. It displays the CPU and System temperature values, a scaling graph of temperature history,high-temperature warning lights and temperatures in celcius, fahrenheit or kelvin.
+wmgtemp is a dock-app for Window Maker that graphically displays the CPU and System temperatures using the lm_sensors package. It was originally intended to work with the VIA686A chipset but also supports some other sensors. It displays the CPU and System temperature values, a scaling graph of temperature history,high-temperature warning lights and temperatures in celsius, fahrenheit or kelvin.
 .PP
 The temperature graph is auto scaling, meaning that if the max or min temperature boundary is crossed the graph will be scaled to display the temperature. A red line marks the upper boundary whereas a blue line indicates the lower boundary. When all the temperatures being displayed are within the boundaries the graph will be scaled back to the preset values for min/max and the boundary indicator lines will be removed.
 .PP
@@ -17,9 +17,9 @@
 display the usage information
 .TP
 .B \-s, \-\-scale=SCALE
-show temperatures using SCALE temperature scale. SCALE=celcius, fahrenheit or kelvin.
+show temperatures using SCALE temperature scale. SCALE=celsius, fahrenheit or kelvin.
 .br
-\fBDefault\fP: celcius
+\fBDefault\fP: celsius
 .TP
 .B \-g, \-\-graph=STYLE
 display graph as STYLE. STYLE=line or block.
@@ -28,13 +28,13 @@
 .TP
 
 .B \-H, \-\-high=TEMP
-display red warning light at TEMP degrees celcius.
+display red warning light at TEMP degrees celsius.
 .br
 \fBDefault\fP: 50
 .TP
 
 .B \-w, \-\-warn=TEMP
-display amber warning light at TEMP degrees celcius.
+display amber warning light at TEMP degrees celsius.
 .br
 \fBDefault\fP: 45
 
@@ -46,19 +46,19 @@
 
 .TP
 .B \-m, \-\-min=TEMP
-set the lower bound of the graph to TEMP degrees celcius.
+set the lower bound of the graph to TEMP degrees celsius.
 .br
 \fBDefault\fP: 20
 
 .TP
 .B \-M, \-\-max=TEMP
-set the upper bound of the graph to TEMP degrees celcius.
+set the upper bound of the graph to TEMP degrees celsius.
 .br
 \fBDefault\fP: 35
 
 .TP
 .B \-a, \-\-execat=TEMP
-execute a command at TEMP degrees celcius.
+execute a command at TEMP degrees celsius.
 .br
 \fBDefault\fP: none
 
@@ -80,7 +80,7 @@
 .nf
 .IP
 # wmgtemp example config
-scale:celcius
+scale:celsius
 graph:line
 high:50
 warn:45
@@ -96,11 +96,11 @@
 You can cycle through the graph types by clicking on the graph display area.
 .PP
 .SS High Temperature Toggle
-You can toggle the displaying of high temperatures by click on the temperature for the corrosponding temperature. The viewing of high temperatures is indicated by an amber arrow to the left of the temperature. The current temperatures will continue to be displayed on the graph.
+You can toggle the displaying of high temperatures by click on the temperature for the corresponding temperature. The viewing of high temperatures is indicated by an amber arrow to the left of the temperature. The current temperatures will continue to be displayed on the graph.
 .PP
 .SH
 .SS Temperature display TOGGLE
-You may toggle the displaying of a temperature on the graph by clicking on the corrosponding type. e.g To toggle the display of the CPU temperature click on CPU. The type indicator (CPU or SYS) will disappear and the temperature will not be displayed on the graph, although the temperature value will continue to be displayed.
+You may toggle the displaying of a temperature on the graph by clicking on the corresponding type. e.g To toggle the display of the CPU temperature click on CPU. The type indicator (CPU or SYS) will disappear and the temperature will not be displayed on the graph, although the temperature value will continue to be displayed.
 .PP
 .SH
 .SS Temperature Scale Cycling
diff -urN --exclude='*~' --exclude='.#*' --exclude=CVS --exclude=RCS --exclude='*,v' wmgtemp-0.5/src/wmgtemp.c wmgtemp-0.5-new/src/wmgtemp.c
--- wmgtemp-0.5/src/wmgtemp.c	   2001/12/18 17:01:48	1.2
+++ wmgtemp-0.5-new/src/wmgtemp.c  2001/12/18 17:07:22	1.3
@@ -31,7 +31,7 @@
 #define WARN_NONE         2
 #define WARN_WARN         3
 #define WARN_HIGH         4
-#define TSCALE_CELCIUS    5
+#define TSCALE_CELSIUS    5
 #define TSCALE_FAHRENHEIT 6
 #define TSCALE_KELVIN     7
 #define GRAPH_LINE        8
@@ -62,8 +62,8 @@
 
 #define TEMPTOFAHRENHEIT(t) ((int)((t * (1.8) + 32)))
 #define TEMPTOKELVIN(t)     ((int)(t + 273))
-#define TEMPTOCELCIUS(t)    (t)
-#define TEMPTODISPLAYSCALE(temp, display_flags) (IsOn((display_flags), TSCALE_CELCIUS) ? TEMPTOCELCIUS((temp)) : (IsOn((display_flags), TSCALE_KELVIN) ? TEMPTOKELVIN((temp)) : TEMPTOFAHRENHEIT((temp))))
+#define TEMPTOCELSIUS(t)    (t)
+#define TEMPTODISPLAYSCALE(temp, display_flags) (IsOn((display_flags), TSCALE_CELSIUS) ? TEMPTOCELSIUS((temp)) : (IsOn((display_flags), TSCALE_KELVIN) ? TEMPTOKELVIN((temp)) : TEMPTOFAHRENHEIT((temp))))
 
 /* Prototypes */
 int init_sensors();
@@ -124,7 +124,7 @@
   short tmp_swap;
 
   BitOn(SENSOR_DISP, WARN_NONE);
-  BitOn(SENSOR_DISP, TSCALE_CELCIUS);
+  BitOn(SENSOR_DISP, TSCALE_CELSIUS);
   BitOn(SENSOR_DISP, GRAPH_LINE);
 
   if(!process_config(argc, argv)) {
@@ -132,7 +132,7 @@
   }
   
   if(!init_sensors()) {
-    printf("wmgtemp: Error initilising lm_sensors.");
+    printf("wmgtemp: Error initializing lm_sensors.");
     exit(-1);
   }
   
@@ -241,7 +241,7 @@
 
   draw_scale_indicator();
 
-  // Initialise the temperature arrays.
+  // Initialize the temperature arrays.
   for(i = 0; i < 59; i++) {
     cpu_history[i] = -1;
     sys_history[i] = -1;
@@ -260,7 +260,7 @@
 }
 
 void draw_scale_indicator() {
-  if(IsOn(SENSOR_DISP, TSCALE_CELCIUS)) {
+  if(IsOn(SENSOR_DISP, TSCALE_CELSIUS)) {
     if(IsOn(SENSOR_DISP, CPU))
       copyXPMArea(61, 65, 5, 7, 55, CPU_YPOS);
     if(IsOn(SENSOR_DISP, SYS))
@@ -604,7 +604,7 @@
   FILE *config_file;
   int res;
 
-  /* Initialise sensors using sensors config file */
+  /* Initialize sensors using sensors config file */
   config_file = fopen("/etc/sensors.conf", "r");
   res = sensors_init(config_file);
 
@@ -631,21 +631,21 @@
 Options:
    -s, --scale=SCALE  display temperatures in SCALE
                       SCALE=kelvin, fahrenheit
-                      [Default: celcius]
+                      [Default: celsius]
    -g, --graph=STYLE  display graph as STYLE
                       STYLE=line, block
                       [Default: line]
-   -H, --high=TEMP    Display red warning light at TEMP degrees celcius
+   -H, --high=TEMP    Display red warning light at TEMP degrees celsius
                       [Default: 50]
-   -w, --warn=TEMP    Display amber warning light at TEMP degrees celcius
+   -w, --warn=TEMP    Display amber warning light at TEMP degrees celsius
                       [Default: 45]
    -u, --update=SEC   update the display every SEC seconds
                       [Default: 1]
-   -m, --min=TEMP     set the lower bound of the graph to TEMP degrees celcius
+   -m, --min=TEMP     set the lower bound of the graph to TEMP degrees celsius
                       [Default: 20]
-   -M, --max=TEMP     set the upper bound of the graph to TEMP degrees celcius
+   -M, --max=TEMP     set the upper bound of the graph to TEMP degrees celsius
                       [Default: 35]
-   -a, --execat=TEMP  Execute a command at TEMP degrees celcius
+   -a, --execat=TEMP  Execute a command at TEMP degrees celsius
    -e, --exec=COMMAND Execute COMMAND when the 'execat' temperature is reached
    -t, --swap         Swap CPU and SYS temps
    -h, --help         Displays this help screen
@@ -717,8 +717,8 @@
 }
 
 inline void cycle_temptype() {
-  if(IsOn(SENSOR_DISP, TSCALE_CELCIUS)) {
-    BitOff(SENSOR_DISP, TSCALE_CELCIUS);
+  if(IsOn(SENSOR_DISP, TSCALE_CELSIUS)) {
+    BitOff(SENSOR_DISP, TSCALE_CELSIUS);
     BitOn(SENSOR_DISP, TSCALE_KELVIN);
   }
   else if(IsOn(SENSOR_DISP, TSCALE_KELVIN)) {
@@ -727,7 +727,7 @@
   }
   else if(IsOn(SENSOR_DISP, TSCALE_FAHRENHEIT)) {
     BitOff(SENSOR_DISP, TSCALE_FAHRENHEIT);
-    BitOn(SENSOR_DISP, TSCALE_CELCIUS);
+    BitOn(SENSOR_DISP, TSCALE_CELSIUS);
   }
 }
 
@@ -844,11 +844,11 @@
     }
     else if(!strncmp(rc_scale, "f", 1)) {
       BitOff(SENSOR_DISP, TSCALE_KELVIN);
-      BitOff(SENSOR_DISP, TSCALE_CELCIUS);
+      BitOff(SENSOR_DISP, TSCALE_CELSIUS);
       BitOn(SENSOR_DISP, TSCALE_FAHRENHEIT);
     }
     else if(!strncmp(rc_scale, "k", 1)) {
-      BitOff(SENSOR_DISP, TSCALE_CELCIUS);
+      BitOff(SENSOR_DISP, TSCALE_CELSIUS);
       BitOff(SENSOR_DISP, TSCALE_FAHRENHEIT);
       BitOn(SENSOR_DISP, TSCALE_KELVIN);
     }
@@ -865,7 +865,7 @@
       parse_ok = 0;
     }
     else {
-      printf("wmgtemp: high temp set to %d degrees celcius.\n", (int)high_temp);
+      printf("wmgtemp: high temp set to %d degrees celsius.\n", (int)high_temp);
     }
   }
   if(rc_warn != NULL) {
@@ -875,7 +875,7 @@
       parse_ok = 0;
     }
     else {
-      printf("wmgtemp: warning temp set to %d degrees celcius.\n", (int)warn_temp);
+      printf("wmgtemp: warning temp set to %d degrees celsius.\n", (int)warn_temp);
     }
   }
   if(rc_max != NULL) {
@@ -885,7 +885,7 @@
       parse_ok = 0;
     }
     else {
-      printf("wmgtemp: Upper range set to %d degrees celcius.\n", (int)range_upper);
+      printf("wmgtemp: Upper range set to %d degrees celsius.\n", (int)range_upper);
     }
   }
   if(rc_min != NULL) {
@@ -895,7 +895,7 @@
       parse_ok = 0;
     }
     else {
-      printf("wmgtemp: Lower range set to %d degrees celcius.\n", (int)range_lower);
+      printf("wmgtemp: Lower range set to %d degrees celsius.\n", (int)range_lower);
     }
   }
   if(rc_delay != NULL) {
@@ -918,17 +918,17 @@
       if(rc_exec != NULL) {
 	if(strcmp(rc_exec, "")) {
 	  exec_app = strdup(rc_exec);
-	  printf("wmgtemp: Executing \"%s\" at %d degrees celcius.\n", exec_app, (int)execat);
+	  printf("wmgtemp: Executing \"%s\" at %d degrees celsius.\n", exec_app, (int)execat);
 	}
 	else {
-	  printf("You must supply an command to execute\n");
+	  printf("You must supply a command to execute\n");
 	  parse_ok = 0;
 	}
       }
       else {
-	printf("You must supply an command to execute\n");
+	printf("You must supply a command to execute\n");
 	parse_ok = 0;
       }
     }
